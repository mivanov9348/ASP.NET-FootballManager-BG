// <auto-generated />
using System;
using ASP.NET_FootballManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballManager.Infrastructure.Migrations
{
    [DbContext(typeof(FootballManagerDbContext))]
    [Migration("20230901102915_AddDb")]
    partial class AddDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NationId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Cup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationId")
                        .HasColumnType("int");

                    b.Property<int>("Participants")
                        .HasColumnType("int");

                    b.Property<int>("Rounds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NationId");

                    b.ToTable("Cups");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.EuropeanCup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Participants")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Rounds")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("EuropeanCups");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Fixture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AwayTeamGoal")
                        .HasColumnType("int");

                    b.Property<int?>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<string>("AwayTeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompetitionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CupId")
                        .HasColumnType("int");

                    b.Property<int?>("DayId")
                        .HasColumnType("int");

                    b.Property<int?>("DrawId")
                        .HasColumnType("int");

                    b.Property<int?>("EuropeanCupId")
                        .HasColumnType("int");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamGoal")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPlayed")
                        .HasColumnType("bit");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("CupId");

                    b.HasIndex("DayId");

                    b.HasIndex("DrawId");

                    b.HasIndex("EuropeanCupId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CupRound")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("EuroCupRound")
                        .HasColumnType("int");

                    b.Property<int>("GameOptionId")
                        .HasColumnType("int");

                    b.Property<int>("LeagueRound")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameOptionId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Inbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("FullMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("MessageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Inboxes");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DrawId")
                        .HasColumnType("int");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationId")
                        .HasColumnType("int");

                    b.Property<int?>("Rounds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrawId");

                    b.HasIndex("NationId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentTeamId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTeamId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrentFixtureId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<string>("SituationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Turn")
                        .HasColumnType("int");

                    b.Property<bool>("isEnd")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrentFixtureId");

                    b.HasIndex("GameId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Nation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Nations");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FreeAgent")
                        .HasColumnType("bit");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsStarting11")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("NationId")
                        .HasColumnType("int");

                    b.Property<double>("Overall")
                        .HasColumnType("float");

                    b.Property<int>("PlayerAttributesId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerStatsId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GameId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("NationId");

                    b.HasIndex("PositionId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CupId")
                        .HasColumnType("int");

                    b.Property<int?>("EuropeanCupId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCupParticipant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEuroParticipant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlayable")
                        .HasColumnType("bit");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("NationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CupId");

                    b.HasIndex("EuropeanCupId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("NationId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.VirtualTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<int>("ChampionsCup")
                        .HasColumnType("int");

                    b.Property<int?>("CupId")
                        .HasColumnType("int");

                    b.Property<int>("Cups")
                        .HasColumnType("int");

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<int>("EuroCups")
                        .HasColumnType("int");

                    b.Property<int?>("EuropeanCupId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GoalAgainst")
                        .HasColumnType("int");

                    b.Property<int>("GoalDifference")
                        .HasColumnType("int");

                    b.Property<int>("GoalScored")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCupParticipant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEuroParticipant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlayable")
                        .HasColumnType("bit");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("Loses")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("Matches")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Overall")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Titles")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.Property<bool>("isDrawed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CupId");

                    b.HasIndex("EuropeanCupId");

                    b.HasIndex("GameId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TeamId");

                    b.ToTable("VirtualTeams");
                });

            modelBuilder.Entity("DrawVirtualTeam", b =>
                {
                    b.Property<int>("AllDrawsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("AllDrawsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("DrawVirtualTeam");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Calendar.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DayOrder")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDrawDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlayed")
                        .HasColumnType("bit");

                    b.Property<int>("MonthId")
                        .HasColumnType("int");

                    b.Property<int>("WeekDayOrder")
                        .HasColumnType("int");

                    b.Property<int>("WeekId")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.Property<bool>("isCupDay")
                        .HasColumnType("bit");

                    b.Property<bool>("isEuroCupDay")
                        .HasColumnType("bit");

                    b.Property<bool>("isLeagueDay")
                        .HasColumnType("bit");

                    b.Property<bool>("isMatchDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("MonthId");

                    b.HasIndex("WeekId");

                    b.HasIndex("YearId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Calendar.Month", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("MonthName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonthOrder")
                        .HasColumnType("int");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("YearId");

                    b.ToTable("Months");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Calendar.Week", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("WeekOrder")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("YearId");

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Calendar.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("YearOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Draw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDrawStarted")
                        .HasColumnType("bit");

                    b.Property<int?>("NumOfGroups")
                        .HasColumnType("int");

                    b.Property<int?>("TeamsPergroup")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Draws");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.GameOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DrawCoins")
                        .HasColumnType("int");

                    b.Property<int>("FirstPlaceCoins")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMaximumAge")
                        .HasColumnType("int");

                    b.Property<int>("PlayerMinimumAge")
                        .HasColumnType("int");

                    b.Property<int>("SecondPlaceCoins")
                        .HasColumnType("int");

                    b.Property<int>("StartingCoins")
                        .HasColumnType("int");

                    b.Property<int>("ThirdPlaceCoins")
                        .HasColumnType("int");

                    b.Property<int>("TimeInterval")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WinCoins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.ToTable("GameOptions");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.PlayerAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BallControll")
                        .HasColumnType("int");

                    b.Property<double>("BallControllWeight")
                        .HasColumnType("float");

                    b.Property<int>("Dribbling")
                        .HasColumnType("int");

                    b.Property<double>("DribblingWeight")
                        .HasColumnType("float");

                    b.Property<int>("Finishing")
                        .HasColumnType("int");

                    b.Property<double>("FinishingWeight")
                        .HasColumnType("float");

                    b.Property<int>("Heading")
                        .HasColumnType("int");

                    b.Property<double>("HeadingWeight")
                        .HasColumnType("float");

                    b.Property<int>("OneOnOne")
                        .HasColumnType("int");

                    b.Property<double>("OneOnOneWeight")
                        .HasColumnType("float");

                    b.Property<int>("Pace")
                        .HasColumnType("int");

                    b.Property<double>("PaceWeight")
                        .HasColumnType("float");

                    b.Property<int>("Passing")
                        .HasColumnType("int");

                    b.Property<double>("PassingWeight")
                        .HasColumnType("float");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Positioning")
                        .HasColumnType("int");

                    b.Property<double>("PositioningWeight")
                        .HasColumnType("float");

                    b.Property<int>("Reflexes")
                        .HasColumnType("int");

                    b.Property<double>("ReflexesWeight")
                        .HasColumnType("float");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<double>("StaminaWeight")
                        .HasColumnType("float");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<double>("StrengthWeight")
                        .HasColumnType("float");

                    b.Property<int>("Tackling")
                        .HasColumnType("int");

                    b.Property<double>("TacklingWeight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerAttributes");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.PlayerStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Appearance")
                        .HasColumnType("int");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("GoalsConceded")
                        .HasColumnType("int");

                    b.Property<int>("Passes")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Tacklings")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MonthWeek", b =>
                {
                    b.Property<int>("MonthsId")
                        .HasColumnType("int");

                    b.Property<int>("WeeksId")
                        .HasColumnType("int");

                    b.HasKey("MonthsId", "WeeksId");

                    b.HasIndex("WeeksId");

                    b.ToTable("MonthWeek");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.City", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Nation", "Nation")
                        .WithMany("Cities")
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Cup", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Nation", "Nation")
                        .WithMany("Cups")
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.EuropeanCup", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", "Game")
                        .WithMany("EuropeanCups")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Fixture", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.VirtualTeam", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Cup", "Cup")
                        .WithMany("Fixtures")
                        .HasForeignKey("CupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballManager.Infrastructure.Data.DataModels.Calendar.Day", "Day")
                        .WithMany("Fixtures")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballManager.Infrastructure.Data.DataModels.Draw", "Draw")
                        .WithMany("Fixtures")
                        .HasForeignKey("DrawId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.EuropeanCup", "EuropeanCup")
                        .WithMany("Fixtures")
                        .HasForeignKey("EuropeanCupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.VirtualTeam", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.League", "League")
                        .WithMany("Fixtures")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AwayTeam");

                    b.Navigation("Cup");

                    b.Navigation("Day");

                    b.Navigation("Draw");

                    b.Navigation("EuropeanCup");

                    b.Navigation("HomeTeam");

                    b.Navigation("League");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", b =>
                {
                    b.HasOne("FootballManager.Infrastructure.Data.DataModels.GameOption", "GameOption")
                        .WithMany("Games")
                        .HasForeignKey("GameOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Manager", "Manager")
                        .WithMany("Games")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Team", "Team")
                        .WithMany("Games")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("GameOption");

                    b.Navigation("Manager");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Inbox", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", "Game")
                        .WithMany("Inboxes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.League", b =>
                {
                    b.HasOne("FootballManager.Infrastructure.Data.DataModels.Draw", "Draw")
                        .WithMany("Leagues")
                        .HasForeignKey("DrawId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Nation", "Nation")
                        .WithMany("Leagues")
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Draw");

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Manager", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Team", "CurrentTeam")
                        .WithMany("Managers")
                        .HasForeignKey("CurrentTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("CurrentTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Match", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Fixture", "CurrentFixture")
                        .WithMany("Matches")
                        .HasForeignKey("CurrentFixtureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", "Game")
                        .WithMany("Matches")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentFixture");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Player", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.City", "City")
                        .WithMany("Players")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.League", "League")
                        .WithMany("Players")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Nation", "Nation")
                        .WithMany("Players")
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Position", "Position")
                        .WithMany("Players")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.VirtualTeam", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Game");

                    b.Navigation("League");

                    b.Navigation("Nation");

                    b.Navigation("Position");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Team", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.City", "City")
                        .WithMany("Teams")
                        .HasForeignKey("CityId");

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Cup", "Cup")
                        .WithMany("Teams")
                        .HasForeignKey("CupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.EuropeanCup", "EuropeanCup")
                        .WithMany("Teams")
                        .HasForeignKey("EuropeanCupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Nation", "Nation")
                        .WithMany("Teams")
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Cup");

                    b.Navigation("EuropeanCup");

                    b.Navigation("League");

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.VirtualTeam", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Cup", "Cup")
                        .WithMany("VirtualTeams")
                        .HasForeignKey("CupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.EuropeanCup", "EuropeanCup")
                        .WithMany("VirtualTeams")
                        .HasForeignKey("EuropeanCupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", "Game")
                        .WithMany("VirtualTeams")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.League", "League")
                        .WithMany("VirtualTeams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Manager", null)
                        .WithMany("VirtualTeams")
                        .HasForeignKey("ManagerId");

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Team", "Team")
                        .WithMany("VirtualTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cup");

                    b.Navigation("EuropeanCup");

                    b.Navigation("Game");

                    b.Navigation("League");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DrawVirtualTeam", b =>
                {
                    b.HasOne("FootballManager.Infrastructure.Data.DataModels.Draw", null)
                        .WithMany()
                        .HasForeignKey("AllDrawsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.VirtualTeam", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Calendar.Day", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", "Game")
                        .WithMany("Days")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballManager.Infrastructure.Data.DataModels.Calendar.Month", "Month")
                        .WithMany("Days")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballManager.Infrastructure.Data.DataModels.Calendar.Week", "Week")
                        .WithMany("Days")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballManager.Infrastructure.Data.DataModels.Calendar.Year", "Year")
                        .WithMany("Days")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Month");

                    b.Navigation("Week");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Calendar.Month", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", "Game")
                        .WithMany("Months")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballManager.Infrastructure.Data.DataModels.Calendar.Year", "Year")
                        .WithMany("Months")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Game");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Calendar.Week", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", "Game")
                        .WithMany("Weeks")
                        .HasForeignKey("GameId");

                    b.HasOne("FootballManager.Infrastructure.Data.DataModels.Calendar.Year", "Year")
                        .WithMany("Weeks")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Calendar.Year", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", "Game")
                        .WithMany("Years")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Game");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.GameOption", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("FootballManager.Infrastructure.Data.DataModels.GameOption", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.PlayerAttribute", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Player", "Player")
                        .WithOne("PlayerAttributes")
                        .HasForeignKey("FootballManager.Infrastructure.Data.DataModels.PlayerAttribute", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.PlayerStats", b =>
                {
                    b.HasOne("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Player", "Player")
                        .WithOne("PlayerStats")
                        .HasForeignKey("FootballManager.Infrastructure.Data.DataModels.PlayerStats", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MonthWeek", b =>
                {
                    b.HasOne("FootballManager.Infrastructure.Data.DataModels.Calendar.Month", null)
                        .WithMany()
                        .HasForeignKey("MonthsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballManager.Infrastructure.Data.DataModels.Calendar.Week", null)
                        .WithMany()
                        .HasForeignKey("WeeksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.City", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Cup", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("Teams");

                    b.Navigation("VirtualTeams");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.EuropeanCup", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("Teams");

                    b.Navigation("VirtualTeams");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Fixture", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Game", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("EuropeanCups");

                    b.Navigation("Inboxes");

                    b.Navigation("Matches");

                    b.Navigation("Months");

                    b.Navigation("Players");

                    b.Navigation("VirtualTeams");

                    b.Navigation("Weeks");

                    b.Navigation("Years");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.League", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("Players");

                    b.Navigation("Teams");

                    b.Navigation("VirtualTeams");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Manager", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("VirtualTeams");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Nation", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Cups");

                    b.Navigation("Leagues");

                    b.Navigation("Players");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Player", b =>
                {
                    b.Navigation("PlayerAttributes");

                    b.Navigation("PlayerStats");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Position", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.Team", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Managers");

                    b.Navigation("VirtualTeams");
                });

            modelBuilder.Entity("ASP.NET_FootballManager.Infrastructure.Data.DataModels.VirtualTeam", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Calendar.Day", b =>
                {
                    b.Navigation("Fixtures");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Calendar.Month", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Calendar.Week", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Calendar.Year", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Months");

                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.Draw", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("FootballManager.Infrastructure.Data.DataModels.GameOption", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
